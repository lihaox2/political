<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bayee.political.mapper.RiskRelevantMapper" >
  <resultMap id="BaseResultMap" type="com.bayee.political.domain.RiskRelevant" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="police_id" property="policeId" jdbcType="VARCHAR" />
    <result column="index_num" property="indexNum" jdbcType="DOUBLE" />
    <result column="deduction_score" property="deductionScore" jdbcType="DOUBLE" />
    <result column="deduction_count" property="deductionCount" jdbcType="INTEGER" />
    <result column="creation_date" property="creationDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, police_id, index_num, deduction_score, deduction_count, creation_date, update_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from risk_relevant
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from risk_relevant
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bayee.political.domain.RiskRelevant" >
    insert into risk_relevant (id, police_id, index_num, 
      deduction_score, deduction_count, creation_date, 
      update_date)
    values (#{id,jdbcType=INTEGER}, #{policeId,jdbcType=VARCHAR}, #{indexNum,jdbcType=DOUBLE}, 
      #{deductionScore,jdbcType=DOUBLE}, #{deductionCount,jdbcType=INTEGER}, #{creationDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.bayee.political.domain.RiskRelevant" >
    insert into risk_relevant
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="policeId != null" >
        police_id,
      </if>
      <if test="indexNum != null" >
        index_num,
      </if>
      <if test="deductionScore != null" >
        deduction_score,
      </if>
      <if test="deductionCount != null" >
        deduction_count,
      </if>
      <if test="creationDate != null" >
        creation_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="policeId != null" >
        #{policeId,jdbcType=VARCHAR},
      </if>
      <if test="indexNum != null" >
        #{indexNum,jdbcType=DOUBLE},
      </if>
      <if test="deductionScore != null" >
        #{deductionScore,jdbcType=DOUBLE},
      </if>
      <if test="deductionCount != null" >
        #{deductionCount,jdbcType=INTEGER},
      </if>
      <if test="creationDate != null" >
        #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bayee.political.domain.RiskRelevant" >
    update risk_relevant
    <set >
      <if test="policeId != null" >
        police_id = #{policeId,jdbcType=VARCHAR},
      </if>
      <if test="indexNum != null" >
        index_num = #{indexNum,jdbcType=DOUBLE},
      </if>
      <if test="deductionScore != null" >
        deduction_score = #{deductionScore,jdbcType=DOUBLE},
      </if>
      <if test="deductionCount != null" >
        deduction_count = #{deductionCount,jdbcType=INTEGER},
      </if>
      <if test="creationDate != null" >
        creation_date = #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bayee.political.domain.RiskRelevant" >
    update risk_relevant
    set police_id = #{policeId,jdbcType=VARCHAR},
      index_num = #{indexNum,jdbcType=DOUBLE},
      deduction_score = #{deductionScore,jdbcType=DOUBLE},
      deduction_count = #{deductionCount,jdbcType=INTEGER},
      creation_date = #{creationDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findByPoliceIdAndDate" resultMap="BaseResultMap">
    select * from risk_relevant
    where police_id = #{policeId} and date_format(creation_date, '%Y-%m') = date_format(#{date}, '%Y-%m') limit 1
  </select>

  <select id="findGlobalIndexNum" resultType="com.bayee.political.pojo.GlobalIndexNumResultDO">
    SELECT
      ifnull(MAX(${column}), 0) as maxNum, ifnull(min(${column}), 0) as minNum
    FROM risk_relevant
    where 1 = 1
    <if test="timeType == 1">
      and DATE_FORMAT(creation_date, '%Y') = DATE_FORMAT(#{date}, '%Y')
    </if>
    <if test="timeType == 2">
      and DATE_FORMAT(creation_date, '%Y-%m') = DATE_FORMAT(#{date}, '%Y-%m')
    </if>
  </select>

  <select id="riskRelevantItem" resultMap="BaseResultMap">
    select
        police_id, ifnull(sum(index_num), 0) as index_num
    from risk_relevant where police_id = #{policeId}
    <if test="timeType == 1">
      and DATE_FORMAT(creation_date, '%Y') = SUBSTR(#{dateTime}, 1, 4)
    </if>
    <if test="timeType == 2">
      and DATE_FORMAT(creation_date, '%Y-%m')=#{dateTime}
    </if>
  </select>

  <select id="riskNearSixMonthChart" resultType="com.bayee.political.json.ChartResult">
    select IFNULL(b.value,0) as value,CONCAT(c.id,'æœˆ') as name
    from(select DATE_FORMAT(CURDATE(), '%Y-%m') as `year_month`
      union select DATE_FORMAT((CURDATE() - interval 1 month), '%Y-%m') as `year_month`
      union select DATE_FORMAT((CURDATE() - interval 2 month), '%Y-%m') as `year_month`
      union select DATE_FORMAT((CURDATE() - interval 3 month), '%Y-%m') as `year_month`
      union select DATE_FORMAT((CURDATE() - interval 4 month), '%Y-%m') as `year_month`
      union select DATE_FORMAT((CURDATE() - interval 5 month), '%Y-%m') as `year_month` ) a
      left join(select SUM(index_num) as value,DATE_FORMAT(creation_date, '%Y-%m') as name from risk_relevant
      where police_id = #{policeId} group by DATE_FORMAT(creation_date, '%Y-%m')) b on b.name=a.year_month
      left join month c on c.num_name=RIGHT(a.year_month,2)
    order by a.year_month
  </select>

</mapper>