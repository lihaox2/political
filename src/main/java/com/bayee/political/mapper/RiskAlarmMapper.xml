<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bayee.political.mapper.RiskAlarmMapper" >
  <resultMap id="BaseResultMap" type="com.bayee.political.domain.RiskAlarm" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="police_id" property="policeId" jdbcType="VARCHAR" />
    <result column="alarm_type" property="alarmType" jdbcType="INTEGER" />
    <result column="alarm_score" property="alarmScore" jdbcType="DOUBLE" />
    <result column="is_talk" property="isTalk" jdbcType="INTEGER" />
    <result column="creation_date" property="creationDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, police_id, alarm_type, alarm_score,is_talk, creation_date, update_date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from risk_alarm
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from risk_alarm
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <!-- 警员预警新增 -->
  <insert id="riskAlarmCreat" keyColumn="id" keyProperty="id" parameterType="com.bayee.political.domain.RiskAlarm" useGeneratedKeys="true">
    insert into risk_alarm (police_id, alarm_type, 
      alarm_score,is_talk, creation_date, update_date
      )
    values (#{policeId,jdbcType=VARCHAR}, #{alarmType,jdbcType=INTEGER}, 
      #{alarmScore,jdbcType=DOUBLE},#{isTalk,jdbcType=INTEGER}, #{creationDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.bayee.political.domain.RiskAlarm" >
    insert into risk_alarm
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="policeId != null" >
        police_id,
      </if>
      <if test="alarmType != null" >
        alarm_type,
      </if>
      <if test="alarmScore != null" >
        alarm_score,
      </if>
      <if test="creationDate != null" >
        creation_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="policeId != null" >
        #{policeId,jdbcType=VARCHAR},
      </if>
      <if test="alarmType != null" >
        #{alarmType,jdbcType=INTEGER},
      </if>
      <if test="alarmScore != null" >
        #{alarmScore,jdbcType=DOUBLE},
      </if>
      <if test="creationDate != null" >
        #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bayee.political.domain.RiskAlarm" >
    update risk_alarm
    <set >
      <if test="policeId != null" >
        police_id = #{policeId,jdbcType=VARCHAR},
      </if>
      <if test="alarmType != null" >
        alarm_type = #{alarmType,jdbcType=INTEGER},
      </if>
      <if test="alarmScore != null" >
        alarm_score = #{alarmScore,jdbcType=DOUBLE},
      </if>
       <if test="isTalk != null" >
        is_talk = #{isTalk,jdbcType=INTEGER},
      </if>
      <if test="creationDate != null" >
        creation_date = #{creationDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bayee.political.domain.RiskAlarm" >
    update risk_alarm
    set police_id = #{policeId,jdbcType=VARCHAR},
      alarm_type = #{alarmType,jdbcType=INTEGER},
      alarm_score = #{alarmScore,jdbcType=DOUBLE},
      creation_date = #{creationDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 警员预警分页查询 -->
<select id="riskAlarmPageList" parameterType="com.bayee.political.domain.RiskAlarm" resultMap="BaseResultMap">
select count(*) as num,a.police_id,b.name,b.head_image as headImage,
c.name as departmentName,d.position_name as positionName,e.creation_date from risk_alarm a
left join user b on b.police_id=a.police_id
left join department c on c.id=b.department_id
left join police_position d on d.id=b.position_id
left join(select police_id,MAX(creation_date) as creation_date 
from risk_alarm GROUP BY police_id) e on e.police_id=a.police_id
where 1=1 
    <!-- <if test="startTime != null and startTime !=''">
	    and a.creation_date &gt;=#{startTime} 
	</if>
	 <if test="endTime != null and endTime !=''">
	    and a.creation_date &lt;=#{endTime}
	</if> -->
	<if test="dateTime != null and dateTime !=''">
	    and DATE_FORMAT(e.creation_date,'%Y-%m')=#{dateTime}
	</if>
GROUP BY a.police_id order by count(*) desc limit #{pageNum},#{pageSize}
</select>
<!-- 警员预警列表总数 -->
<select id="riskAlarmPageCount" parameterType="com.bayee.political.domain.RiskAlarm" resultType="Integer">
select count(*) from 
(select count(*) as num,a.police_id,b.name,b.head_image as headImage,
c.name as departmentName,d.position_name as positionName,e.creation_date from risk_alarm a
left join user b on b.police_id=a.police_id
left join department c on c.id=b.department_id
left join police_position d on d.id=b.position_id
left join(select police_id,MAX(creation_date) as creation_date 
from risk_alarm GROUP BY police_id) e on e.police_id=a.police_id
where 1=1
    <!-- <if test="startTime != null and startTime !=''">
	    and a.creation_date &gt;=#{startTime} 
	</if>
	 <if test="endTime != null and endTime !=''">
	    and a.creation_date &lt;=#{endTime}
	</if> -->
	<if test="dateTime != null and dateTime !=''">
	    and DATE_FORMAT(e.creation_date,'%Y-%m')=#{dateTime}
	</if>
GROUP BY a.police_id) as t
</select>

<select id="findByPoliceIdAndTypeAndDate" resultMap="BaseResultMap">
    select * from risk_alarm where police_id = #{policeId} and alarm_type = #{type}
                               and DATE_FORMAT(creation_date,'%Y-%m') = DATE_FORMAT(#{date},'%Y-%m')
  </select>

  <insert id="insertRiskAlarms" parameterType="java.util.List">
    insert into risk_alarm (id, police_id, alarm_type,alarm_score,is_talk, creation_date, update_date)
    values
    <foreach collection ="list" item="item" index= "index" separator =",">
      (null,#{item.policeId,jdbcType=VARCHAR}, #{item.alarmType,jdbcType=INTEGER},
      #{item.alarmScore,jdbcType=DOUBLE}, 0,
      #{item.creationDate,jdbcType=TIMESTAMP}, #{item.updateDate,jdbcType=TIMESTAMP}
      )
    </foreach >
  </insert>
  
  <select id="theMonthAlarm" resultMap="BaseResultMap">
	 SELECT u.name,r.*,count(1) num ,sum(alarm_score) AS alarmScore
FROM risk_alarm r,`user` u WHERE r.police_id=u.police_id AND DATE_FORMAT(r.creation_date,'%Y-%m')=DATE_FORMAT(CURDATE(), '%Y-%m')
 GROUP BY r.police_id ORDER BY alarmScore DESC 
</select>

<select id="findAlarmType" resultType="String">
	SELECT r.alarm_name FROM risk_alarm_type r WHERE r.id=#{id}
</select>

<select id="findByPoliceIdRiskAlarm" resultType="HashMap">
	 SELECT r.police_id as policeId,r.alarm_type as alarmType,r.alarm_score as alarmScore
	FROM risk_alarm r,`user` u WHERE r.police_id=u.police_id AND DATE_FORMAT(r.creation_date,'%Y-%m')=DATE_FORMAT(CURDATE(), '%Y-%m')
	AND r.police_id=#{policeId}
</select>


<select id="continuityAlarm" resultType="HashMap">
	SELECT u.`name`,a.* FROM (SELECT a.police_id AS policeId,a.consequtive+1 AS value FROM (select base.police_id, count(subq.creation_date) consequtive 
from (select distinct police_id from risk_alarm) base
left join 

(
    select a.* 
    from (select police_id, 
     cast(concat(left(creation_date,7), '-01') as date) as creation_date 
    from risk_alarm) a 
    join (select police_id, date_sub(cast(concat(left(creation_date,7), '-01') as date), interval 1 month) as creation_date from risk_alarm) b 
    on a.police_id = b.police_id and a.creation_date = b.creation_date 
) subq 
on subq.police_id = base.police_id 
group by base.police_id
ORDER BY consequtive) a WHERE a.consequtive>0) a ,`user` u WHERE a.policeId=u.police_id ORDER BY a.value desc
</select>

<select id="continuityAlarmDetails" resultType="HashMap">
	SELECT u.`name`,t.alarm_name AS alarmName,a.creation_date AS alarmTime FROM (select distinct r1.*
    from
      (select * from risk_alarm where police_id = #{policeId} order by creation_date) r1,
      (select * from risk_alarm where police_id = #{policeId} order by creation_date) r2
   where (
   (DATE_FORMAT(DATE_SUB(r1.creation_date,interval 1 month), '%Y-%m') = DATE_FORMAT(r2.creation_date, '%Y-%m'))
   or 
   (DATE_FORMAT(DATE_SUB(r2.creation_date,interval 1 month), '%Y-%m') = DATE_FORMAT(r1.creation_date, '%Y-%m'))
   )
   group by DATE_FORMAT(r1.creation_date, '%Y-%m')
    order by DATE_FORMAT(r1.creation_date, '%Y-%m')) a,risk_alarm_type t,`user` u WHERE a.police_id=u.police_id AND a.alarm_type=t.id ;
</select>
</mapper>